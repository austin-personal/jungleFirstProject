posts -"석재"
- 두 카테고리를 검색기능으로 묶어서 한번에 포스트 로드 할 수  있도록
- 현재 참여인원 표시
- 마이 페이지 버튼
- 레이아웃 수정
   -타이틀, 카테고리(음식종류, 식사방법), 텍스트 배치, 기타등등
   -타이틀, 카테고리 여백 확보

update.html -- "민석 (마지막)"
- 게시글 열람시 본인 글이면 수정, 삭제 버튼 활성화, 참여버튼 비활성화

post_detail -"재석"
- 메인로고 클릭시 posts로 복귀(O)
- 레이아웃 수정 
   -레이블링 하기 (O)
   -content 여백 (O)
- 주최자 출력하기 (O)

- 참여 버튼 누를 시, jinja2 id 전송(O)
- 호스트 페이지 완료 (O)
- 마이페이지 채팅 버튼 


- 포스트 delete, update 구현


- 참여인원 카운트, 기능 구현
 
홈페이지 - "석재"
- 한글로 수정

백엔드 - "민석"
- posts에서 전체 소팅 기능 구현
   - posts에서 기간 지난 포스트 로드 안하게 하기(완료)
   - 전체 소팅 기능 구현 (완료)
   - 이메일 중복체크 (완료)
   - Websocket 


   ###  chat room redirect
room={}
@app.route('/chat')
def chat():
    if 'email' not in session:
        return redirect(url_for('login'))
    
    room = request.args.get('room')
    username = session['email']
    return render_template('chatpage.html', room=room, username=username)

@socketio.on('join')
def on_join(data):
    username = data['username']
    room = data['room']
    join_room(room)

    if room not in rooms:
        rooms[room] = []

    # Check if the user is already in the list
    user_in_room = next((member for member in rooms[room] if member['username'] == username), None)
    if user_in_room:
        user_in_room['online'] = True
    else:
        rooms[room].append({'username': username, 'online': True})

    emit('message', f'{username} has entered the room.', to=room)
    emit('update_members', rooms[room], to=room)

@socketio.on('leave')
def on_leave(data):
    username = data['username']
    room = data['room']
    leave_room(room)

    if room in rooms:
        for member in rooms[room]:
            if member['username'] == username:
                member['online'] = False
                break

    emit('message', f'{username} has left the room.', to=room)
    emit('update_members', rooms[room], to=room)

@socketio.on('message')
def handle_message(data):
    username = data['username']
    room = data['room']
    message = data['message']
    send(f'{username}: {message}', to=room)